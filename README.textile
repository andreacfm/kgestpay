h3. License

p. This gem is developed by fractalgarden (fractalgarden.com) and released under BSD license. See license file for more details.

h3. Installation

pre. gem install kgestpay

h3. Running tests

p. Create a file /test/cc.yml with the details of the credit card to be used to run the tests:

pre. number: cc_number
exp_month: 09
exp_year: 13
cvv: 111
name: 'Andrea Campolonghi'
email: email@email.com

h3. callPagamS2S

p. Service that authorize only or complete the transaction based on the gestpay account configs provided (MOTO)

pre. #gateway init
gateway = Kemen::KGestPay.new(:shopLogin => 'login', :endpoint => 'url del ws - test o produzione')
#call the service with the required parameters
resp = gateway.callPagamS2S(
    :uicCode => {currency code},
    :amount => ..,
    :shopTransactionId => {transaction id assigned by the seller},
    :cardNumber => ......,
    :expiryMonth => 09,
    :expiryYear => {last 2 digits of the expiring year},
    :cvv => ...,
    :buyerName => .....,
    :buyerEmail => ....)
#check the transaction result
resp.transactionResult => KO or OK
resp.authorizationCode => auth code
resp.bankTransactionID => transaction is assigned by the bank
resp.errorCode => in case of KO holds the error code assigned by gestpay
resp.errorDescription => in case of KO holds the description of the error
resp.buyer.buyerName => nome del cliente
resp.buyer.buyerEmail => email del cliente

h3. callSettleS2S

p. Cash an already authorized card/amount. Used only for transaction only authorized but not yet cashed.

pre. #gateway init
gateway = Kemen::KGestPay.new(:shopLogin => 'login', :endpoint => 'url del ws - test o produzione')
#call the service
resp = @k.callSettleS2S(
    :bankTransID => {transactionid assigned by the bank in the authorization process},
    OR
    :shopTransID => {transactionid assigned by the seller in the authorization process},
    :uicCode => {currency code},
    :amount => ...
)
#check the transaction result
resp.transactionResult => KO or OK

h3. callDeleteS2S

p. Delete an authorized transaction. Available only for transaction only authorized but not yet finalized.

pre. #gateway init
gateway = Kemen::KGestPay.new(:shopLogin => 'login', :endpoint => 'url del ws - test o produzione')
#call the service
resp = @k.callDeleteS2S(
    :shopTransactionId => {transactionid assigned by the seller in the authorization process}
    OR
    :bankTransactionId => {transactionid assigned by the bank in the authorization process}
)
#check the transaction result
resp.transactionResult => KO or OK


h3. callRefundS2S

p. Refund a completed transaction. Refund can be for a partial amount. Both shopTransactionId and bankTransactionId must be provided for a bug that return a system error
if one is missing.

pre. #gateway init
gateway = Kemen::KGestPay.new(:shopLogin => 'login', :endpoint => 'url del ws - test o produzione')
#call the service
resp = @k.callRefundS2S(
    :shopTransactionId => {transactionid assigned by the seller in the authorization process},
    :bankTransactionId => {transactionid assigned by the bank in the authorization process},
    :uicCode => 242,
    :amount => ...
)
#check the transaction result
resp.transactionResult => KO or OK


h3. callReadTrxS2S

p. Read informations about a transaction.

pre. #gateway init
gateway = Kemen::KGestPay.new(:shopLogin => 'login', :endpoint => 'url del ws - test o produzione')
#call the service
resp = @k.callRefundS2S(
    :shopTransactionId => {transactionid assigned by the seller in the authorization process},
    :bankTransactionId => {transactionid assigned by the bank in the authorization process}
)
#check the transaction result
resp.transactionResult => KO = Authorized or OK = Not Authorized
+ the same infos that are normally returned from callPagamS2S

h3. callVerifycardS2S

p. Not implemented cause service is not available.

